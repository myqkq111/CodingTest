package level_1;

import java.util.Arrays;

public class Level_1 {
	public static void main(String[] args) {
		
		Level_1_Method lm = new Level_1_Method();
	
		//1. 달리기 경주
//		문제 설명
//		얀에서는 매년 달리기 경주가 열립니다. 해설진들은 선수들이 자기 바로 앞의 선수를 추월할 때 추월한 선수의 이름을 부릅니다. 
//		예를 들어 1등부터 3등까지 "mumu", "soe", "poe" 선수들이 순서대로 달리고 있을 때, 해설진이 "soe"선수를 불렀다면 2등인 "soe" 선수가 1등인 "mumu" 선수를 추월했다는 것입니다. 
//		즉 "soe" 선수가 1등, "mumu" 선수가 2등으로 바뀝니다.
//	
//		선수들의 이름이 1등부터 현재 등수 순서대로 담긴 문자열 배열 players와 해설진이 부른 이름을 담은 문자열 배열 callings가 매개변수로 주어질 때, 
//		경주가 끝났을 때 선수들의 이름을 1등부터 등수 순서대로 배열에 담아 return 하는 solution 함수를 완성해주세요.
//	
//		제한사항
//		5 ≤ players의 길이 ≤ 50,000
//		players[i]는 i번째 선수의 이름을 의미합니다.
//		players의 원소들은 알파벳 소문자로만 이루어져 있습니다.
//		players에는 중복된 값이 들어가 있지 않습니다.
//		3 ≤ players[i]의 길이 ≤ 10
//		2 ≤ callings의 길이 ≤ 1,000,000
//		callings는 players의 원소들로만 이루어져 있습니다.
//		경주 진행중 1등인 선수의 이름은 불리지 않습니다.

//		String[] players = {"mumu", "soe", "poe", "kai", "mine"};
//		String[] callings = {"kai", "kai", "mine", "mine"};
//		
//		System.out.println(Arrays.toString(lm.solution(players, callings)));
		
		
		
		
		
		
		//--------------------------------------------------------------------------
	
	
	
	
	
	
		//2. 추억 점수
//		문제 설명
//		사진들을 보며 추억에 젖어 있던 루는 사진별로 추억 점수를 매길려고 합니다. 
//		사진 속에 나오는 인물의 그리움 점수를 모두 합산한 값이 해당 사진의 추억 점수가 됩니다. 
//		예를 들어 사진 속 인물의 이름이 ["may", "kein", "kain"]이고 각 인물의 그리움 점수가 [5점, 10점, 1점]일 때 해당 사진의 
//		추억 점수는 16(5 + 10 + 1)점이 됩니다. 다른 사진 속 인물의 이름이 ["kali", "mari", "don", "tony"]이고 ["kali", "mari", "don"]의 
//		그리움 점수가 각각 [11점, 1점, 55점]]이고, "tony"는 그리움 점수가 없을 때, 이 사진의 추억 점수는 3명의 그리움 점수를 합한 67(11 + 1 + 55)점입니다.
//
//		그리워하는 사람의 이름을 담은 문자열 배열 name, 각 사람별 그리움 점수를 담은 정수 배열 yearning, 각 사진에 찍힌 인물의 이름을 담은 
//		이차원 문자열 배열 photo가 매개변수로 주어질 때, 사진들의 추억 점수를 photo에 주어진 순서대로 배열에 담아 return하는 solution 함수를 완성해주세요.
//
//		제한사항
//		3 ≤ name의 길이 = yearning의 길이≤ 100
//		3 ≤ name의 원소의 길이 ≤ 7
//		name의 원소들은 알파벳 소문자로만 이루어져 있습니다.
//		name에는 중복된 값이 들어가지 않습니다.
//		1 ≤ yearning[i] ≤ 100
//		yearning[i]는 i번째 사람의 그리움 점수입니다.
//		3 ≤ photo의 길이 ≤ 100
//		1 ≤ photo[i]의 길이 ≤ 100
//		3 ≤ photo[i]의 원소(문자열)의 길이 ≤ 7
//		photo[i]의 원소들은 알파벳 소문자로만 이루어져 있습니다.
//		photo[i]의 원소들은 중복된 값이 들어가지 않습니다.
	
//		String[] name = {"may", "kein", "kain", "radi"};
//		int[] yearning = {5, 10, 1, 3};
//		String[][] photo = {{"may"},{"kein", "deny", "may"},{"kon", "coni"}};
//		
//		System.out.println(Arrays.toString(lm.solution(name, yearning, photo)));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//3. 공원 산책
//		문제 설명
//		지나다니는 길을 'O', 장애물을 'X'로 나타낸 직사각형 격자 모양의 공원에서 로봇 강아지가 산책을 하려합니다. 
//		산책은 로봇 강아지에 미리 입력된 명령에 따라 진행하며, 명령은 다음과 같은 형식으로 주어집니다.
//
//		["방향 거리", "방향 거리" … ]
//		예를 들어 "E 5"는 로봇 강아지가 현재 위치에서 동쪽으로 5칸 이동했다는 의미입니다. 로봇 강아지는 명령을 수행하기 전에 다음 두 가지를 먼저 확인합니다.
//
//		주어진 방향으로 이동할 때 공원을 벗어나는지 확인합니다.
//		주어진 방향으로 이동 중 장애물을 만나는지 확인합니다.
//		위 두 가지중 어느 하나라도 해당된다면, 로봇 강아지는 해당 명령을 무시하고 다음 명령을 수행합니다.
//		공원의 가로 길이가 W, 세로 길이가 H라고 할 때, 공원의 좌측 상단의 좌표는 (0, 0), 우측 하단의 좌표는 (H - 1, W - 1) 입니다.
//		공원을 나타내는 문자열 배열 park, 로봇 강아지가 수행할 명령이 담긴 문자열 배열 routes가 매개변수로 주어질 때, 
//		로봇 강아지가 모든 명령을 수행 후 놓인 위치를 [세로 방향 좌표, 가로 방향 좌표] 순으로 배열에 담아 return 하도록 solution 함수를 완성해주세요.
//
//		제한사항
//		3 ≤ park의 길이 ≤ 50
//		3 ≤ park[i]의 길이 ≤ 50
//		park[i]는 다음 문자들로 이루어져 있으며 시작지점은 하나만 주어집니다.
//		S : 시작 지점
//		O : 이동 가능한 통로
//		X : 장애물
//		park는 직사각형 모양입니다.
//		1 ≤ routes의 길이 ≤ 50
//		routes의 각 원소는 로봇 강아지가 수행할 명령어를 나타냅니다.
//		로봇 강아지는 routes의 첫 번째 원소부터 순서대로 명령을 수행합니다.
//		routes의 원소는 "op n"과 같은 구조로 이루어져 있으며, op는 이동할 방향, n은 이동할 칸의 수를 의미합니다.
//		op는 다음 네 가지중 하나로 이루어져 있습니다.
//		N : 북쪽으로 주어진 칸만큼 이동합니다.
//		S : 남쪽으로 주어진 칸만큼 이동합니다.
//		W : 서쪽으로 주어진 칸만큼 이동합니다.
//		E : 동쪽으로 주어진 칸만큼 이동합니다.
//		1 ≤ n ≤ 9
		
//		String[] park = {"OSO","OOO","OXO","OOO"};
// 		String[] routes = {"E 2","S 3","W 1"};
// 		
// 		System.out.println(Arrays.toString(lm.solution(park, routes)));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	}
}

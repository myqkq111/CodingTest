package level_2;

import java.util.Arrays;

public class Level_2 {
	public static void main(String[] args) {
		
		Level_2_Method lm = new Level_2_Method();
		
		//1. 최댓값과 최솟값
//		문제 설명
//		문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다. str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 "(최소값) (최대값)"형태의 문자열을 반환하는 함수, solution을 완성하세요.
//		예를들어 s가 "1 2 3 4"라면 "1 4"를 리턴하고, "-1 -2 -3 -4"라면 "-4 -1"을 리턴하면 됩니다.
//
//		제한 조건
//		s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.
		
//		String s = "-1 -1";
//		
//		System.out.println(lm.solution(s));
		
		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		//2. JadenCase 문자열만들기
//		문제 설명
//		JadenCase란 모든 단어의 첫 문자가 대문자이고, 그 외의 알파벳은 소문자인 문자열입니다. 단, 첫 문자가 알파벳이 아닐 때에는 이어지는 알파벳은 소문자로 쓰면 됩니다. (첫 번째 입출력 예 참고)
//		문자열 s가 주어졌을 때, s를 JadenCase로 바꾼 문자열을 리턴하는 함수, solution을 완성해주세요.
//
//		제한 조건
//		s는 길이 1 이상 200 이하인 문자열입니다.
//		s는 알파벳과 숫자, 공백문자(" ")로 이루어져 있습니다.
//		숫자는 단어의 첫 문자로만 나옵니다.
//		숫자로만 이루어진 단어는 없습니다.
//		공백문자가 연속해서 나올 수 있습니다.
		
//		String s = "for the last week";
//		
//		System.out.println(lm.solution(s));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		//3. 올바른 괄호
//		문제 설명
//		괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 예를 들어
//
//		"()()" 또는 "(())()" 는 올바른 괄호입니다.
//		")()(" 또는 "(()(" 는 올바르지 않은 괄호입니다.
//		'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.
//
//		제한사항
//		문자열 s의 길이 : 100,000 이하의 자연수
//		문자열 s는 '(' 또는 ')' 로만 이루어져 있습니다.
		
//		String s = "(())()";
//		
//		System.out.println(lm.solution(s));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		//4. 이진 변환 반복하기
//		문제 설명
//		0과 1로 이루어진 어떤 문자열 x에 대한 이진 변환을 다음과 같이 정의합니다.
//
//		x의 모든 0을 제거합니다.
//		x의 길이를 c라고 하면, x를 "c를 2진법으로 표현한 문자열"로 바꿉니다.
//		예를 들어, x = "0111010"이라면, x에 이진 변환을 가하면 x = "0111010" -> "1111" -> "100" 이 됩니다.
//
//		0과 1로 이루어진 문자열 s가 매개변수로 주어집니다. s가 "1"이 될 때까지 계속해서 s에 이진 변환을 가했을 때, 이진 변환의 횟수와 변환 과정에서 제거된 모든 0의 개수를 각각 배열에 담아 return 하도록 solution 함수를 완성해주세요.
//
//		제한사항
//		s의 길이는 1 이상 150,000 이하입니다.
//		s에는 '1'이 최소 하나 이상 포함되어 있습니다.
		
//		String s = "1111111";
//		
//		System.out.println(Arrays.toString(lm.solution(s)));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		//5. 숫자의 표현
//		문제 설명
//		Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다. 예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.
//
//		1 + 2 + 3 + 4 + 5 = 15
//		4 + 5 + 6 = 15
//		7 + 8 = 15
//		15 = 15
//		자연수 n이 매개변수로 주어질 때, 연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성해주세요.
//
//		제한사항
//		n은 10,000 이하의 자연수 입니다.
		
//		int n = 15;
//		
//		System.out.println(lm.solution(n));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		//6. 다음 큰 숫자
//		문제 설명
//		자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.
//
//		조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.
//		조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.
//		조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.
//		예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.
//
//		자연수 n이 매개변수로 주어질 때, n의 다음 큰 숫자를 return 하는 solution 함수를 완성해주세요.
//
//		제한 사항
//		n은 1,000,000 이하의 자연수 입니다.
		
//		int n = 15;
//		
//		System.out.println(lm.solution(n));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		//7. 피보나치 수
//		문제 설명
//		피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.
//
//		예를들어
//
//		F(2) = F(0) + F(1) = 0 + 1 = 1
//		F(3) = F(1) + F(2) = 1 + 1 = 2
//		F(4) = F(2) + F(3) = 1 + 2 = 3
//		F(5) = F(3) + F(4) = 2 + 3 = 5
//		와 같이 이어집니다.
//
//		2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.
//
//		제한 사항
//		n은 2 이상 100,000 이하인 자연수입니다.
		
//		int n = 5;
//		
//		System.out.println(lm.solution(n));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//8. 짝지어 제거하기
//		문제 설명
//		짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.
//
//		예를 들어, 문자열 S = baabaa 라면
//
//		b aa baa → bb aa → aa →
//
//		의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.
//
//		제한사항
//		문자열의 길이 : 1,000,000이하의 자연수
//		문자열은 모두 소문자로 이루어져 있습니다.
		
//		String s = "cdcd";
//		
//		System.out.println(lm.solution(s));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//9. 카펫
//		문제 설명
//		Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.
//		Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.
//
//		Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.
//
//		제한사항
//		갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
//		노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
//		카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.
		
//		int brown = 24;
//		int yellow = 24;
//		
//		System.out.println(Arrays.toString(lm.solution(brown, yellow)));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//10. 영어 끝말잇기
//		문제 설명
//		1부터 n까지 번호가 붙어있는 n명의 사람이 영어 끝말잇기를 하고 있습니다. 영어 끝말잇기는 다음과 같은 규칙으로 진행됩니다.
//
//		1번부터 번호 순서대로 한 사람씩 차례대로 단어를 말합니다.
//		마지막 사람이 단어를 말한 다음에는 다시 1번부터 시작합니다.
//		앞사람이 말한 단어의 마지막 문자로 시작하는 단어를 말해야 합니다.
//		이전에 등장했던 단어는 사용할 수 없습니다.
//		한 글자인 단어는 인정되지 않습니다.
//		다음은 3명이 끝말잇기를 하는 상황을 나타냅니다.
//
//		tank → kick → know → wheel → land → dream → mother → robot → tank
//
//		위 끝말잇기는 다음과 같이 진행됩니다.
//
//		1번 사람이 자신의 첫 번째 차례에 tank를 말합니다.
//		2번 사람이 자신의 첫 번째 차례에 kick을 말합니다.
//		3번 사람이 자신의 첫 번째 차례에 know를 말합니다.
//		1번 사람이 자신의 두 번째 차례에 wheel을 말합니다.
//		(계속 진행)
//		끝말잇기를 계속 진행해 나가다 보면, 3번 사람이 자신의 세 번째 차례에 말한 tank 라는 단어는 이전에 등장했던 단어이므로 탈락하게 됩니다.
//
//		사람의 수 n과 사람들이 순서대로 말한 단어 words 가 매개변수로 주어질 때, 가장 먼저 탈락하는 사람의 번호와 그 사람이 자신의 몇 번째 차례에 탈락하는지를 구해서 return 하도록 solution 함수를 완성해주세요.
//
//		제한 사항
//		끝말잇기에 참여하는 사람의 수 n은 2 이상 10 이하의 자연수입니다.
//		words는 끝말잇기에 사용한 단어들이 순서대로 들어있는 배열이며, 길이는 n 이상 100 이하입니다.
//		단어의 길이는 2 이상 50 이하입니다.
//		모든 단어는 알파벳 소문자로만 이루어져 있습니다.
//		끝말잇기에 사용되는 단어의 뜻(의미)은 신경 쓰지 않으셔도 됩니다.
//		정답은 [ 번호, 차례 ] 형태로 return 해주세요.
//		만약 주어진 단어들로 탈락자가 생기지 않는다면, [0, 0]을 return 해주세요.
		
//		int n = 2;
//		String[] words = {"hello", "one", "even", "never", "now", "world", "draw"};
//		
//		System.out.println(Arrays.toString(lm.solution(n, words)));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//11. 점프와 순간 이동
//		문제 설명
//		OO 연구소는 한 번에 K 칸을 앞으로 점프하거나, (현재까지 온 거리) x 2 에 해당하는 위치로 순간이동을 할 수 있는 특수한 기능을 가진 아이언 슈트를 개발하여 판매하고 있습니다. 이 아이언 슈트는 건전지로 작동되는데, 순간이동을 하면 건전지 사용량이 줄지 않지만, 앞으로 K 칸을 점프하면 K 만큼의 건전지 사용량이 듭니다. 그러므로 아이언 슈트를 착용하고 이동할 때는 순간 이동을 하는 것이 더 효율적입니다. 아이언 슈트 구매자는 아이언 슈트를 착용하고 거리가 N 만큼 떨어져 있는 장소로 가려고 합니다. 단, 건전지 사용량을 줄이기 위해 점프로 이동하는 것은 최소로 하려고 합니다. 아이언 슈트 구매자가 이동하려는 거리 N이 주어졌을 때, 사용해야 하는 건전지 사용량의 최솟값을 return하는 solution 함수를 만들어 주세요.
//
//		예를 들어 거리가 5만큼 떨어져 있는 장소로 가려고 합니다.
//		아이언 슈트를 입고 거리가 5만큼 떨어져 있는 장소로 갈 수 있는 경우의 수는 여러 가지입니다.
//
//		처음 위치 0 에서 5 칸을 앞으로 점프하면 바로 도착하지만, 건전지 사용량이 5 만큼 듭니다.
//		처음 위치 0 에서 2 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 2) x 2에 해당하는 위치로 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 3 만큼 듭니다.
//		처음 위치 0 에서 1 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 1) x 2에 해당하는 위치로 이동할 수 있으므로 위치 2로 이동됩니다. 이때 다시 순간이동 하면 (현재까지 온 거리 : 2) x 2 만큼 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 2 만큼 듭니다.
//		위의 3가지 경우 거리가 5만큼 떨어져 있는 장소로 가기 위해서 3번째 경우가 건전지 사용량이 가장 적으므로 답은 2가 됩니다.
//
//		제한 사항
//		숫자 N: 1 이상 10억 이하의 자연수
//		숫자 K: 1 이상의 자연수
		
//		int n = 5000;
//		
//		System.out.println(lm.solution(n));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//12. 구명보트
//		문제 설명
//		무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.
//
//		예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.
//
//		구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.
//
//		사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.
//
//		제한사항
//		무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
//		각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
//		구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
//		구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.
		
//		int[] people = {70,80,50};
//		int limit = 100;
//		
//		System.out.println(lm.solution(people, limit));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//13. 예상 대진표
//		문제 설명
//		△△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다. N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다. 각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다. 만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고, 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 게임은 최종 한 명이 남을 때까지 진행됩니다.
//
//		이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다. 게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요. 단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.
//
//		제한사항
//		N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)
//		A, B : N 이하인 자연수 (단, A ≠ B 입니다.)
		
//		int n = 8;
//		int a = 4;
//		int b = 7;
//		
//		System.out.println(lm.solution(n, a, b));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//14. n개의 최소공배수
//		문제 설명
//		두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.
//
//		제한 사항
//		arr은 길이 1이상, 15이하인 배열입니다.
//		arr의 원소는 100 이하인 자연수입니다.
		
//		int[] arr = {1,2,3};
//		
//		System.out.println(lm.solution(arr));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		//15. 멀리뛰기
//		문제 설명
//		효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
//		(1칸, 1칸, 1칸, 1칸)
//		(1칸, 2칸, 1칸)
//		(1칸, 1칸, 2칸)
//		(2칸, 1칸, 1칸)
//		(2칸, 2칸)
//		의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.
//
//		제한 사항
//		n은 1 이상, 2000 이하인 정수입니다.
		
//		int n = 4;
//		
//		System.out.println(lm.solution(n));

		
		
		
		
		
		//--------------------------------------------------------------------------
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
